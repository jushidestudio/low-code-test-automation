low-code-test-automation

## 概要
QAエンジニアとしての経験から、テスト自動化の初学者が無料で手軽に学べるツールが不足していると感じ、本プロジェクトを開発しました。
このアプリは、テスト自動化の入門ツールとして、実際の自動テスト案件参画時の障壁を低減することを目的としています。
主な機能は、**ノーコードでのテストコード生成**、**テストコードの一覧管理**、**手動による自動テスト実行**です。
テスト自動化の初学者の方や、ノーコードツールの無料体験をしたい方を主な対象ユーザーとしています。将来的には、より高度なテスト自動化ツールへのステップアップを支援したいと考えています。

## 主な機能
- 直感的操作でテストコード生成
- ローカルDBでテストコードの保存・編集・削除・実行が可能な一覧を完備
- 選択したテストケースを選択後に一括テスト実行が可能

## 使用技術
- Python 3.12.7
- Flask
- Playwright
- SQLite

## 動作環境
- OS: Windows 11
- Python: 3.12.7

## インストールと実行方法

### 1. リポジトリのクローン
本アプリケーションのコードを取得します。

```bash
git clone [https://github.com/jushidestudio/low-code-test-automation.git](https://github.com/jushidestudio/low-code-test-automation.git)
cd low-code-test-automation
2. 仮想環境の構築と有効化
プロジェクトに必要なPython環境を独立させます。

Bash

python -m venv venv
Windowsの場合:

Bash

.\venv\Scripts\activate
macOS/Linuxの場合:

Bash

source venv/bin/activate
3. 必要なライブラリのインストール
仮想環境を有効にした状態で、必要なPythonライブラリをインストールします。

Bash

pip install -r requirements.txt
4. アプリケーションの起動
アプリケーションを起動します。

Bash

python run.py
5. アクセス方法
アプリケーションが起動したら、ブラウザで以下のURLにアクセスしてください。

[http://127.0.0.1:5000/](http://127.0.0.1:5000/)
課題・今後の展望
解決したい課題
現在、このプロジェクトには以下の課題があると考えています。

テスト実行時の操作ログの表示不足
実行履歴が不明瞭なため、ユーザーがテストの状況を把握しづらい。

エビデンス確保の欠如
現在はテスト実行機能のみで、テスト結果の証拠となる画像や動画が取得できていない。

テストコード生成後の手動コピペ操作
テストコード生成後に手動でのコピペ作業が必要であり、コードに不慣れな初学者にとって心理的なハードルが高い。

追加で実装したい機能
今後、以下の機能を追加実装したいと考えています。

テスト実行履歴のテストケース一覧への表示
課題1を解消し、テスト結果の透明性を高める。

テストコード保存時のコード自動挿入機能
スクリーンショット取得など、特定の操作を行いたい箇所にカーソルを合わせ、ボタン一つで関連コードが自動挿入される機能を実装する。これにより、手動でのコード記述を不要にし、初学者の負担を軽減する。

テスト実行の定期実行機能
現在は手動実行のみだが、特定のテストケースを定期的に自動実行できるようにする。

テストケースのフィルター機能
テストケースが増加した際に扱いづらくなることを防ぐため、分類、フィルターの保存、ページング機能などを実装し、一覧の操作性を向上させる。

ライセンス
このプロジェクトはMIT Licenseの下で公開されています。詳細については、LICENSEファイルを参照してください。

連絡先
ご質問やご意見がありましたら、私のポートフォリオサイト または GitHubプロフィール を通じてご連絡ください。
